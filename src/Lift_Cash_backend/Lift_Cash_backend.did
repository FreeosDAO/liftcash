type Proposal = record {
  id : nat64;
  hash : text;
  ratified : bool;
  description : text;
  expiration : nat64;
  votes_for : nat64;
  executed : bool;
  votes_against : nat64;
};
type Result = variant { Ok; Err : text };
type Result_1 = variant { Ok : nat64; Err : text };
type Result_2 = variant { Ok : Proposal; Err : text };
type Role = variant { Proposer; Executor; Voter };
service : () -> {
  assign_role : (text, text) -> (Result);
  create_proposal : (text, nat64) -> (Result_1);
  execute_proposal : (nat64) -> (Result);
  get_caller : () -> (text) query;
  get_proposal : (nat64) -> (Result_2) query;
  get_proposal_history : () -> (vec Proposal) query;
  list_roles : () -> (vec record { Role; vec text }) query;
  ratify_proposal : (nat64) -> (Result);
  remove_role : (text, text) -> (Result);
  vote : (nat64, bool) -> (Result);
  withdraw_proposal : (nat64) -> (Result);
}
